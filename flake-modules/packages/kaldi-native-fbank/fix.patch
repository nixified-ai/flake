diff --git a/CMakeLists.txt b/CMakeLists.txt
index b663145..576df0c 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -62,7 +62,7 @@ endif()
 set(CMAKE_INSTALL_RPATH ${kaldi_native_fbank_rpath_origin})
 set(CMAKE_BUILD_RPATH ${kaldi_native_fbank_rpath_origin})

-set(CMAKE_CXX_STANDARD 14 CACHE STRING "The C++ version to be used.")
+set(CMAKE_CXX_STANDARD 17 CACHE STRING "The C++ version to be used.")

 if(NOT DEFINED BUILD_SHARED_LIBS)
   set(BUILD_SHARED_LIBS ON)
diff --git a/cmake/googletest.cmake b/cmake/googletest.cmake
index 4985668..f2b0e01 100644
--- a/cmake/googletest.cmake
+++ b/cmake/googletest.cmake
@@ -1,79 +1,2 @@
-function(download_googletest)
-  if(CMAKE_VERSION VERSION_LESS 3.11)
-    list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
-  endif()
-
-  include(FetchContent)
-
-  set(googletest_URL  "https://github.com/google/googletest/archive/refs/tags/v1.13.0.tar.gz")
-  set(googletest_URL2 "https://huggingface.co/csukuangfj/k2-cmake-deps/resolve/main/googletest-1.13.0.tar.gz")
-  set(googletest_HASH "SHA256=ad7fdba11ea011c1d925b3289cf4af2c66a352e18d4c7264392fead75e919363")
-
-  # If you don't have access to the Internet,
-  # please pre-download googletest
-  set(possible_file_locations
-    $ENV{HOME}/Downloads/googletest-1.13.0.tar.gz
-    ${PROJECT_SOURCE_DIR}/googletest-1.13.0.tar.gz
-    ${PROJECT_BINARY_DIR}/googletest-1.13.0.tar.gz
-    /tmp/googletest-1.13.0.tar.gz
-    /star-fj/fangjun/download/github/googletest-1.13.0.tar.gz
-  )
-
-  foreach(f IN LISTS possible_file_locations)
-    if(EXISTS ${f})
-      set(googletest_URL  "${f}")
-      file(TO_CMAKE_PATH "${googletest_URL}" googletest_URL)
-      set(googletest_URL2)
-      break()
-    endif()
-  endforeach()
-
-  set(BUILD_GMOCK ON CACHE BOOL "" FORCE)
-  set(INSTALL_GTEST OFF CACHE BOOL "" FORCE)
-  set(gtest_disable_pthreads ON CACHE BOOL "" FORCE)
-  set(gtest_force_shared_crt ON CACHE BOOL "" FORCE)
-
-  FetchContent_Declare(googletest
-    URL
-      ${googletest_URL}
-      ${googletest_URL2}
-    URL_HASH          ${googletest_HASH}
-  )
-
-  FetchContent_GetProperties(googletest)
-  if(NOT googletest_POPULATED)
-    message(STATUS "Downloading googletest from ${googletest_URL}")
-    FetchContent_Populate(googletest)
-  endif()
-  message(STATUS "googletest is downloaded to ${googletest_SOURCE_DIR}")
-  message(STATUS "googletest's binary dir is ${googletest_BINARY_DIR}")
-
-  if(APPLE)
-    set(CMAKE_MACOSX_RPATH ON) # to solve the following warning on macOS
-  endif()
-  #[==[
-  -- Generating done
-    Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run "cmake
-    --help-policy CMP0042" for policy details.  Use the cmake_policy command to
-    set the policy and suppress this warning.
-
-    MACOSX_RPATH is not specified for the following targets:
-
-      gmock
-      gmock_main
-      gtest
-      gtest_main
-
-  This warning is for project developers.  Use -Wno-dev to suppress it.
-  ]==]
-
-  add_subdirectory(${googletest_SOURCE_DIR} ${googletest_BINARY_DIR} EXCLUDE_FROM_ALL)
-
-  target_include_directories(gtest
-    INTERFACE
-      ${googletest_SOURCE_DIR}/googletest/include
-      ${googletest_SOURCE_DIR}/googlemock/include
-  )
-endfunction()
-
-download_googletest()
+find_package(GTest REQUIRED)
+enable_testing()
diff --git a/cmake/kissfft.cmake b/cmake/kissfft.cmake
index bc77ee5..6e7951d 100644
--- a/cmake/kissfft.cmake
+++ b/cmake/kissfft.cmake
@@ -1,77 +1,2 @@
-function(download_kissfft)
-  if(CMAKE_VERSION VERSION_LESS 3.11)
-    list(APPEND CMAKE_MODULE_PATH ${CMAKE_CURRENT_LIST_DIR}/../cmake/Modules)
-  endif()
-
-  include(FetchContent)
-
-  # the latest commit as of 2025.05.28
-  set(kissfft_URL  "https://github.com/mborgerding/kissfft/archive/febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip")
-  set(kissfft_URL2 "")
-  set(kissfft_HASH "SHA256=497103e664168ebe39580b757adbe616f6cf85a16572af581ca7bc42d0ab13fd")
-
-  # If you don't have access to the Internet,
-  # please pre-download kissfft
-  set(possible_file_locations
-    $ENV{HOME}/Downloads/kissfft-febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip
-    ${PROJECT_SOURCE_DIR}/kissfft-febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip
-    ${PROJECT_BINARY_DIR}/kissfft-febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip
-    /tmp/kissfft-febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip
-    /star-fj/fangjun/download/github/kissfft-febd4caeed32e33ad8b2e0bb5ea77542c40f18ec.zip
-  )
-
-  foreach(f IN LISTS possible_file_locations)
-    if(EXISTS ${f})
-      set(kissfft_URL  "${f}")
-      file(TO_CMAKE_PATH "${kissfft_URL}" kissfft_URL)
-      set(kissfft_URL2)
-      break()
-    endif()
-  endforeach()
-
-  set(KISSFFT_PKGCONFIG OFF CACHE BOOL "" FORCE)
-  set(KISSFFT_STATIC ON CACHE BOOL "" FORCE)
-  set(KISSFFT_TEST OFF CACHE BOOL "" FORCE)
-  set(KISSFFT_TOOLS OFF CACHE BOOL "" FORCE)
-
-  FetchContent_Declare(kissfft
-    URL
-      ${kissfft_URL}
-      ${kissfft_URL2}
-    URL_HASH          ${kissfft_HASH}
-  )
-
-  FetchContent_GetProperties(kissfft)
-  if(NOT kissfft_POPULATED)
-    message(STATUS "Downloading kissfft from ${kissfft_URL}")
-    FetchContent_Populate(kissfft)
-  endif()
-  message(STATUS "kissfft is downloaded to ${kissfft_SOURCE_DIR}")
-  message(STATUS "kissfft's binary dir is ${kissfft_BINARY_DIR}")
-
-  if(BUILD_SHARED_LIBS)
-    set(_build_shared_libs_bak ${BUILD_SHARED_LIBS})
-    set(BUILD_SHARED_LIBS OFF)
-  endif()
-
-  add_subdirectory(${kissfft_SOURCE_DIR} ${kissfft_BINARY_DIR} EXCLUDE_FROM_ALL)
-
-  if(_build_shared_libs_bak)
-    set_target_properties(kissfft
-      PROPERTIES
-        POSITION_INDEPENDENT_CODE ON
-        C_VISIBILITY_PRESET hidden
-        CXX_VISIBILITY_PRESET hidden
-    )
-    set(BUILD_SHARED_LIBS ON)
-  endif()
-
-  set(kissfft_SOURCE_DIR ${kissfft_SOURCE_DIR} PARENT_SCOPE)
-
-  include_directories(kissfft
-      ${kissfft_SOURCE_DIR}
-  )
-
-endfunction()
-
-download_kissfft()
+find_package(kissfft REQUIRED)
+include_directories(kissfft ${KISSFFT_INCLUDE_DIRS})
diff --git a/cmake/pybind11.cmake b/cmake/pybind11.cmake
index c708b5f..aead6d2 100644
--- a/cmake/pybind11.cmake
+++ b/cmake/pybind11.cmake
@@ -1,47 +1 @@
-function(download_pybind11)
-  if(CMAKE_VERSION VERSION_LESS 3.11)
-    list(APPEND CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake/Modules)
-  endif()
-
-  include(FetchContent)
-
-  set(pybind11_URL  "https://github.com/pybind/pybind11/archive/refs/tags/v2.10.2.tar.gz")
-  set(pybind11_URL2 "https://huggingface.co/csukuangfj/sherpa-onnx-cmake-deps/resolve/main/pybind11-2.10.2.tar.gz")
-  set(pybind11_HASH "SHA256=93bd1e625e43e03028a3ea7389bba5d3f9f2596abc074b068e70f4ef9b1314ae")
-
-  # If you don't have access to the Internet,
-  # please pre-download pybind11
-  set(possible_file_locations
-    $ENV{HOME}/Downloads/pybind11-2.10.2.tar.gz
-    ${PROJECT_SOURCE_DIR}/pybind11-2.10.2.tar.gz
-    ${PROJECT_BINARY_DIR}/pybind11-2.10.2.tar.gz
-    /tmp/pybind11-2.10.2.tar.gz
-    /star-fj/fangjun/download/github/pybind11-2.10.2.tar.gz
-  )
-
-  foreach(f IN LISTS possible_file_locations)
-    if(EXISTS ${f})
-      set(pybind11_URL  "${f}")
-      file(TO_CMAKE_PATH "${pybind11_URL}" pybind11_URL)
-      set(pybind11_URL2)
-      break()
-    endif()
-  endforeach()
-
-  FetchContent_Declare(pybind11
-    URL
-      ${pybind11_URL}
-      ${pybind11_URL2}
-    URL_HASH          ${pybind11_HASH}
-  )
-
-  FetchContent_GetProperties(pybind11)
-  if(NOT pybind11_POPULATED)
-    message(STATUS "Downloading pybind11 from ${pybind11_URL}")
-    FetchContent_Populate(pybind11)
-  endif()
-  message(STATUS "pybind11 is downloaded to ${pybind11_SOURCE_DIR}")
-  add_subdirectory(${pybind11_SOURCE_DIR} ${pybind11_BINARY_DIR} EXCLUDE_FROM_ALL)
-endfunction()
-
-download_pybind11()
+find_package(pybind11 REQUIRED)
diff --git a/setup.py b/setup.py
index de3d8a2..e23af66 100644
--- a/setup.py
+++ b/setup.py
@@ -6,8 +6,8 @@ import re

 import setuptools

-from cmake.cmake_extension import BuildExtension, bdist_wheel, cmake_extension
-
+from cmake_build_extension.cmake_extension import CMakeExtension
+from cmake_build_extension.build_extension import BuildExtension

 def read_long_description():
     with open("README.md", encoding="utf8") as f:
@@ -39,8 +39,9 @@ setuptools.setup(
     url="https://github.com/csukuangfj/kaldi-native-fbank",
     long_description=read_long_description(),
     long_description_content_type="text/markdown",
-    ext_modules=[cmake_extension("_kaldi_native_fbank")],
-    cmdclass={"build_ext": BuildExtension, "bdist_wheel": bdist_wheel},
+    ext_modules=[CMakeExtension("_kaldi_native_fbank")],
+    cmdclass={"build_ext": BuildExtension, #"bdist_wheel": bdist_wheel
+              },
     zip_safe=False,
     classifiers=[
         "Programming Language :: C++",
